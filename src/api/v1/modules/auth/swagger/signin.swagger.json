{
  "/auth/signin": {
    "post": {
      "summary": "Sign in an existing user",
      "description": "Authenticates a user with the provided email and password. If successful, user information and JWT token will be returned.",
      "operationId": "signinUser",
      "tags": ["Auth"],
      "requestBody": {
        "description": "User credentials required for sign-in",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "john.doe@example.com"
                },
                "password": { "type": "string", "example": "Password@1234" }
              },
              "required": ["email", "password"]
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "User sign-in successful, user and token returned",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "example": "OK" },
                  "statusCode": { "type": "integer", "example": 200 },
                  "response": { "type": "boolean", "example": true },
                  "message": {
                    "type": "string",
                    "example": "Signin successful"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer", "example": 1 },
                          "firstName": { "type": "string", "example": "John" },
                          "lastName": { "type": "string", "example": "Doe" },
                          "email": {
                            "type": "string",
                            "example": "john.doe@example.com"
                          },
                          "isActive": { "type": "boolean", "example": true },
                          "isVerified": { "type": "boolean", "example": true },
                          "role": { "type": "integer", "example": 1 },
                          "createdAt": {
                            "type": "string",
                            "example": "2025-01-01T12:00:00Z"
                          },
                          "updatedAt": {
                            "type": "string",
                            "example": "2025-01-01T12:00:00Z"
                          }
                        }
                      },
                      "tokens": {
                        "type": "object",
                        "properties": {
                          "accessToken": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                          },
                          "refreshToken": {
                            "type": "string",
                            "example": "SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "success-example": {
                  "summary": "A successful signin example response",
                  "value": {
                    "name": "OK",
                    "statusCode": 20,
                    "response": true,
                    "message": "Signin successful",
                    "data": {
                      "user": {
                        "id": 1,
                        "firstName": "John",
                        "lastName": "Doe",
                        "email": "john.doe@example.com",
                        "isActive": false,
                        "isVerified": false,
                        "createdAt": "2025-01-01T12:00:00Z",
                        "updatedAt": "2025-01-01T12:00:00Z",
                        "role": {
                          "id": 2,
                          "name": "Customer",
                          "description": null,
                          "isActive": true
                        },
                        "company": {
                          "id": 3,
                          "name": "Company 1",
                          "primaryContactEmail": "contact@gmail.com"
                        }
                      },
                      "tokens": {
                        "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
                        "refreshToken": "SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Bad request, invalid input",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "InvalidRequestParametersError"
                },
                "response": { "type": "boolean", "example": false },
                "message": {
                  "type": "string",
                  "example": "Invalid request parameters"
                },
                "statusCode": { "type": "integer", "example": 400 },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Email is required"
                      },
                      "field": { "type": "string", "example": "email" },
                      "location": { "type": "string", "example": "body" }
                    }
                  }
                }
              }
            },
            "examples": {
              "invalid-input-error-example": {
                "summary": "Invalid input example response",
                "value": {
                  "name": "InvalidRequestParametersError",
                  "response": false,
                  "message": "Invalid request parameters",
                  "statusCode": 400,
                  "errors": [
                    {
                      "message": "Invalid email",
                      "field": "email",
                      "location": "body"
                    },
                    {
                      "message": "Password should be between 6 to 64 characters long",
                      "field": "password",
                      "location": "body"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized, invalid credentials",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "response": { "type": "boolean", "example": false },
                "name": { "type": "string", "example": "UnauthorizedError" },
                "message": { "type": "string", "example": "Unauthorized" },
                "statusCode": { "type": "integer", "example": 401 },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Invalid credentials"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "unauthorized-error-example": {
                "summary": "Unauthorized error for invalid credentials",
                "value": {
                  "name": "UnauthorizedError",
                  "response": false,
                  "message": "Unauthorized",
                  "statusCode": 401,
                  "errors": [
                    {
                      "message": "Unauthorized"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "response": { "type": "boolean", "example": false },
                "name": {
                  "type": "string",
                  "example": "InternalServerError"
                },
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                },
                "statusCode": { "type": "integer", "example": 500 },
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Internal server error"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "internal-server-error-example": {
                "summary": "Internal server error",
                "value": {
                  "name": "InternalServerError",
                  "response": false,
                  "message": "Internal server error",
                  "statusCode": 500,
                  "errors": [
                    {
                      "message": "Internal server error"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}
